//Создание массива
let fruits = ["Яблоко", "Апельсин", "Слива"];

// Мы можем заменить элемент:
fruits[2] = 'Груша'; // теперь ["Яблоко", "Апельсин", "Груша"]

// …Или добавить новый к существующему массиву:
fruits[3] = 'Лимон'; // теперь ["Яблоко", "Апельсин", "Груша", "Лимон"]

//Общее число элементов массива содержится в его свойстве length:

//В массиве могут храниться элементы любого типа.
let arrDifferent = [ 'Яблоко', { name: 'Джон' }, true, function() { alert('привет'); } ];

/*
Мы можем использовать массив как двустороннюю очередь, используя следующие операции:
push(...items)//добавляет items в конец массива.
pop() //удаляет элемент в конце массива и возвращает его.
shift() //удаляет элемент в начале массива и возвращает его.
unshift(...items) //добавляет items в начало массива.
*/

//Если мы уменьшаем length вручную, массив укорачивается.
let arrСounter = [1, 2, 3, 4, 5];
arrСounter.length = 2; // укорачиваем до двух элементов
arrСounter; // [1, 2]
arrСounter.length = 5; // возвращаем length как было
arrСounter[3]; // undefined: значения не восстановились


/*
Чтобы пройтись по элементам массива:

for (let i=0; i<arrСounter.length; i++) // работает быстрее всего, совместим со старыми браузерами.
for (let item of arrСounter) // современный синтаксис только для значений элементов (к индексам нет доступа).
for (let i in arrСounter) // никогда не используйте для массивов!\
*/




//Задача 1
/*
Давайте произведём 5 операций с массивом.

Создайте массив styles с элементами «Джаз» и «Блюз».
Добавьте «Рок-н-ролл» в конец.
Замените значение в середине на «Классика». Ваш код для поиска значения в середине должен работать для массивов с любой длиной.
Удалите первый элемент массива и покажите его.
Вставьте «Рэп» и «Регги» в начало массива.
*/

const styles = ['Джаз', 'Блюз']; //Создайте массив styles с элементами «Джаз» и «Блюз».
styles.push('Рок-н-ролл'); //Добавьте «Рок-н-ролл» в конец.
styles[Math.floor((styles.length - 1) / 2)] = 'Классика'; //Замените значение в середине на «Классика». Ваш код для поиска значения в середине должен работать для массивов с любой длиной.
console.log(styles.shift()); //Удалите первый элемент массива и покажите его.
styles.unshift('Рэп', 'Регги') //Вставьте «Рэп» и «Регги» в начало массива.

console.log(styles);


//Задача 2
/*
Напишите функцию sumInput(), которая:

Просит пользователя ввести значения, используя prompt и сохраняет их в массив.
Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, пустую строку или нажмёт «Отмена».
Подсчитывает и возвращает сумму элементов массива.
*/


function sumInput() { //Напишите функцию sumInput()
    let numbers = [];
    while (true) {
      let value = prompt("Введите число", 0); //Просит пользователя ввести значения, используя prompt и сохраняет их в массив.
      if (value === "" || value === null || !isFinite(value)) break; //Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, пустую строку или нажмёт «Отмена».
      numbers.push(+value);
    }
    let sum = 0;
    for (let number of numbers) { //Подсчитывает и возвращает сумму элементов массива.
      sum += number;
    }
    return sum;s
}
// console.log(sumInput());



//Задача 3
/*
На входе массив чисел, например: arr = [1, -2, 3, 4, -9, 6].
Задача: найти непрерывный подмассив в arr, сумма элементов в котором максимальна.
Функция getMaxSubSum(arr) должна возвращать эту сумму.
*/

function getMaxSubSum(arr) {
    let maxSum = 0;
    let partialSum = 0;
    for (let item of arr) { // для каждого элемента массива
      partialSum += item; // добавляем значение элемента к partialSum
      maxSum = Math.max(maxSum, partialSum); // запоминаем максимум на данный момент
      if (partialSum < 0) partialSum = 0; // ноль если отрицательное
    }
    return maxSum;
}


// alert( getMaxSubSum([-1, 2, 3, -9]) ); // 5
// alert( getMaxSubSum([-1, 2, 3, -9, 11]) ); // 11
// alert( getMaxSubSum([-2, -1, 1, 2]) ); // 3
// alert( getMaxSubSum([1, 2, 3]) ); // 6



